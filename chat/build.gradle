apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'maven-publish'

group = 'com.github.GetStream'

def DEFAULT_API_ENDPOINT = 'chat-us-east-1.stream-io-api.com'
def DEFAULT_API_KEEP_ALIVE_TIMEOUT = 1000 * 45
def DEFAULT_API_TIMEOUT = 1000 * 6
def DEFAULT_CDN_TIMEOUT = 1000 * 6

android {

    defaultConfig {
        buildConfigField "String", "DEFAULT_API_ENDPOINT", "\"$DEFAULT_API_ENDPOINT\""
        buildConfigField "int", "DEFAULT_API_TIMEOUT", "$DEFAULT_API_TIMEOUT"
        buildConfigField "int", "DEFAULT_CDN_TIMEOUT", "$DEFAULT_CDN_TIMEOUT"
        buildConfigField "int", "DEFAULT_API_KEEP_ALIVE_TIMEOUT", "$DEFAULT_API_KEEP_ALIVE_TIMEOUT"

        vectorDrawables.useSupportLibrary = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
            // Show the result of every unit test, even if it passes.
            all {
                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }
            }
        }
    }

    sourceSets {
        all {
            it.java.srcDir "src/$it.name/kotlin"
        }
        main.java.srcDirs += 'src/main/kotlinX'
    }

    kotlinOptions {
        noStdlib = true
    }
}
dependencies {
    api ChatLibraries.streamLivedata

    implementation ChatLibraries.kotlinSTDLib
    implementation ChatLibraries.appCompat
    implementation ChatLibraries.constraintLayout
    implementation ChatLibraries.androidLegacySupport
    api ChatLibraries.recyclerview
    implementation ChatLibraries.activityKtx
    implementation ChatLibraries.fragmentKtx
    implementation ChatLibraries.lifecycleExtension
    implementation ChatLibraries.lifecycleViewModelKTX

    implementation ChatLibraries.roomRuntime

    implementation ChatLibraries.okhttp
    implementation ChatLibraries.loggingInterceptor

    implementation ChatLibraries.retrofit
    implementation ChatLibraries.gsonConverter

    implementation ChatLibraries.gson

    implementation ChatLibraries.glideRedirect
    implementation(ChatLibraries.glide) {
        exclude group: "com.android.support"
    }
    kapt ChatLibraries.glideCompiler

    implementation ChatLibraries.drawabletoolbox
    implementation ChatLibraries.marwonCore
    implementation ChatLibraries.marwonLinkify
    implementation ChatLibraries.marwonextStrikethrough
    implementation ChatLibraries.marwonImage

    implementation ChatLibraries.fresco
    implementation ChatLibraries.photodraweeview
    implementation ChatLibraries.keyboardVisibilityEvent
    implementation ChatLibraries.dexter

    implementation ChatLibraries.firebaseMessaging

    implementation ChatLibraries.androidxMedia
    implementation ChatLibraries.coil

    // ExoPlayer
    api ChatLibraries.exoplayerCore
    api ChatLibraries.exoplayerDash
    api ChatLibraries.exoplayerHls
    api ChatLibraries.exoplayerSmoothstreaming

    // Tests
    testImplementation ChatLibraries.junitJupiterApi
    testImplementation ChatLibraries.junitJupiterParams
    testRuntimeOnly ChatLibraries.junitJupiterEngine

    testImplementation ChatLibraries.mockito
    testImplementation ChatLibraries.mockitoKotlin
    testImplementation ChatLibraries.androidxCoreTest
    testImplementation ChatLibraries.kluent
    testImplementation ChatLibraries.coroutinesTest
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../docs/")
    exclude '**/utils'
    exclude '**/storage'
    exclude '**/interfaces'
    exclude '**/Command.java'
    exclude '**/Device.java'
    exclude '**/TokenService.java'
    exclude '**/ModelType.java'
    failOnError false
}

task copyJar(type: Copy) {
    description = 'Copying the jar'
    from "$buildDir/intermediates/full_jar/release/createFullJarRelease"
    into file('../attachments')
    include 'full.jar'
}

task copyAar(type: Copy) {
    description = 'Copying the aar'
    from "$buildDir/outputs/aar"
    into file('../attachments')
    include 'library-release.aar'
}

project.afterEvaluate {
    preBuild.dependsOn copyAar
}

clean.dependsOn copyAar
clean.mustRunAfter copyAar

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    // Creates a Maven publication which can be used to test livedata artifact locally.
    // By default the publication is stored into ~/.m2 directory.
    // 1. To release a local publication run `./gradlew publishToMavenLocal`
    // 2. To use it add mavenLocal() into target project's repositories list.
    publishing {
        publications {
            release(MavenPublication) {
                // Applies the component for the release build variant
                from components.release
                // Adds sources as separate jars.
                artifact androidSourcesJar
                // Custom attributes of the publication
                groupId = project.group
                artifactId = 'stream-chat-android'
                version = SDKConfig.versionName
            }
        }
    }
}
