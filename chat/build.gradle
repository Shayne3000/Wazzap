apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

group = 'com.github.GetStream'

def DEFAULT_API_ENDPOINT = 'chat-us-east-1.stream-io-api.com'
def DEFAULT_API_KEEP_ALIVE_TIMEOUT = 1000 * 45
def DEFAULT_API_TIMEOUT = 1000 * 6
def DEFAULT_CDN_TIMEOUT = 1000 * 6

android {

    defaultConfig {
        buildConfigField "String", "DEFAULT_API_ENDPOINT", "\"$DEFAULT_API_ENDPOINT\""
        buildConfigField "int", "DEFAULT_API_TIMEOUT", "$DEFAULT_API_TIMEOUT"
        buildConfigField "int", "DEFAULT_CDN_TIMEOUT", "$DEFAULT_CDN_TIMEOUT"
        buildConfigField "int", "DEFAULT_API_KEEP_ALIVE_TIMEOUT", "$DEFAULT_API_KEEP_ALIVE_TIMEOUT"
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
            // Show the result of every unit test, even if it passes.
            all {
                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }
            }
        }
    }

    sourceSets {
        all {
            it.java.srcDir "src/$it.name/kotlin"
        }
        main.java.srcDirs += 'src/main/kotlinX'
    }
}
final def markdown_version = '4.1.2'
final def jupiter_version = '5.5.1'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'

    implementation 'com.squareup.okhttp3:okhttp:4.1.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.1.0'

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.aminography:redirectglide:1.0.3'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'com.github.duanhong169:drawabletoolbox:1.0.7'
    implementation "io.noties.markwon:core:$markdown_version"
    implementation "io.noties.markwon:linkify:$markdown_version"
    implementation "io.noties.markwon:ext-strikethrough:$markdown_version"
    implementation "io.noties.markwon:image:$markdown_version"

    implementation 'com.facebook.fresco:fresco:1.2.0'
    implementation 'me.relex:photodraweeview:1.1.0'
    implementation 'net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:2.3.0'

    implementation 'com.google.firebase:firebase-messaging:20.0.0'
    implementation 'androidx.media:media:1.1.0'
    // ExoPlayer
    api 'com.google.android.exoplayer:exoplayer-core:2.9.6'
    api 'com.google.android.exoplayer:exoplayer-dash:2.9.6'
    api 'com.google.android.exoplayer:exoplayer-hls:2.9.6'
    api 'com.google.android.exoplayer:exoplayer-smoothstreaming:2.9.6'
    implementation 'androidx.room:room-runtime:2.1.0'
    annotationProcessor 'androidx.room:room-compiler:2.1.0'

    // Tests
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$jupiter_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.2.1"
    testImplementation "org.mockito:mockito-core:2.23.0"
    testImplementation "org.json:json:20190722"
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../docs/")
    exclude '**/utils'
    exclude '**/storage'
    exclude '**/interfaces'
    exclude '**/Command.java'
    exclude '**/Device.java'
    exclude '**/TokenService.java'
    exclude '**/ModelType.java'
    failOnError false
}

task copyJar(type: Copy) {
    description = 'Copying the jar'
    from "$buildDir/intermediates/full_jar/release/createFullJarRelease"
    into file('../attachments')
    include 'full.jar'
}

task copyAar(type: Copy) {
    description = 'Copying the aar'
    from "$buildDir/outputs/aar"
    into file('../attachments')
    include 'library-release.aar'
}

project.afterEvaluate {
    preBuild.dependsOn copyAar
}

clean.dependsOn copyAar
clean.mustRunAfter copyAar
