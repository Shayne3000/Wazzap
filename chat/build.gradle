apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

group = 'com.github.GetStream'

def DEFAULT_API_ENDPOINT = 'chat-us-east-1.stream-io-api.com'
def DEFAULT_API_KEEP_ALIVE_TIMEOUT = 1000 * 45
def DEFAULT_API_TIMEOUT = 1000 * 6
def DEFAULT_CDN_TIMEOUT = 1000 * 6

android {

    defaultConfig {
        buildConfigField "String", "DEFAULT_API_ENDPOINT", "\"$DEFAULT_API_ENDPOINT\""
        buildConfigField "int", "DEFAULT_API_TIMEOUT", "$DEFAULT_API_TIMEOUT"
        buildConfigField "int", "DEFAULT_CDN_TIMEOUT", "$DEFAULT_CDN_TIMEOUT"
        buildConfigField "int", "DEFAULT_API_KEEP_ALIVE_TIMEOUT", "$DEFAULT_API_KEEP_ALIVE_TIMEOUT"
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
    }
}
final def jupiter_version = '5.5.1'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation Libraries.appCompat
    implementation Libraries.constraintLayout
    implementation ChatLibraries.androidLegacySupport
    implementation ChatLibraries.recyclerview
    implementation Libraries.viewModelAndLiveData

    implementation Libraries.okHttp
    implementation Libraries.okHttpLogInterceptor

    implementation ChatLibraries.retrofit
    implementation ChatLibraries.gsonConverter

    implementation ChatLibraries.gson
    implementation ChatLibraries.glideRedirect
    implementation ChatLibraries.glide
    implementation ChatLibraries.drawabletoolbox
    implementation ChatLibraries.marwonCore
    implementation ChatLibraries.marwonLinkify
    implementation ChatLibraries.marwonextStrikethrough
    implementation ChatLibraries.marwonImage

    implementation ChatLibraries.fresco
    implementation 'me.relex:photodraweeview:1.1.0'
    implementation 'net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:2.3.0'

    implementation 'com.google.firebase:firebase-messaging:20.0.0'
    implementation 'androidx.media:media:1.1.0'
    // ExoPlayer
    api 'com.google.android.exoplayer:exoplayer-core:2.9.6'
    api 'com.google.android.exoplayer:exoplayer-dash:2.9.6'
    api 'com.google.android.exoplayer:exoplayer-hls:2.9.6'
    api 'com.google.android.exoplayer:exoplayer-smoothstreaming:2.9.6'
    implementation 'androidx.room:room-runtime:2.1.0'
    annotationProcessor 'androidx.room:room-compiler:2.1.0'

    // Tests
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$jupiter_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.2.1"
    testImplementation "org.mockito:mockito-core:2.23.0"
    testImplementation "org.json:json:20190722"
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../docs/")
    exclude '**/utils'
    exclude '**/storage'
    exclude '**/interfaces'
    exclude '**/Command.java'
    exclude '**/Device.java'
    exclude '**/TokenService.java'
    exclude '**/ModelType.java'
    failOnError false
}

task copyJar(type: Copy) {
    description = 'Copying the jar'
    from "$buildDir/intermediates/full_jar/release/createFullJarRelease"
    into file('../attachments')
    include 'full.jar'
}

task copyAar(type: Copy) {
    description = 'Copying the aar'
    from "$buildDir/outputs/aar"
    into file('../attachments')
    include 'library-release.aar'
}

project.afterEvaluate {
    preBuild.dependsOn copyAar
}

clean.dependsOn copyAar
clean.mustRunAfter copyAar
